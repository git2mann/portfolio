{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/lib/api.ts"],"sourcesContent":["import { Post } from \"@/interfaces/post\";\nimport fs from \"fs\";\nimport matter from \"gray-matter\";\nimport { join } from \"path\";\n\n// Define the directory where Markdown posts are stored\nconst postsDirectory = join(process.cwd(), \"_posts\");\n\n/**\n * Get all post slugs from the _posts directory\n * @returns {string[]} Array of filenames in the posts directory\n */\nexport function getPostSlugs() {\n  return fs.readdirSync(postsDirectory);\n}\n\n/**\n * Get a single post by its slug\n * @param {string} slug - The slug of the post to retrieve\n * @returns {Post} The post data including frontmatter and content\n */\nexport function getPostBySlug(slug: string) {\n  // Remove .md extension from slug if present\n  const realSlug = slug.replace(/\\.md$/, \"\");\n  // Construct the full path to the post file\n  const fullPath = join(postsDirectory, `${realSlug}.md`);\n  // Read the file contents\n  const fileContents = fs.readFileSync(fullPath, \"utf8\");\n  // Parse the frontmatter and content using gray-matter\n  const { data, content } = matter(fileContents);\n\n  // Return the post data with the slug and content\n  return { ...data, slug: realSlug, content } as Post;\n}\n\n/**\n * Get all posts sorted by date\n * @returns {Post[]} Array of all posts sorted by date (newest first)\n */\nexport function getAllPosts(): Post[] {\n  const slugs = getPostSlugs();\n  const posts = slugs\n    .map((slug) => getPostBySlug(slug))\n    .sort((post1, post2) => (post1.date > post2.date ? -1 : 1));\n  return posts.map((post) => ({\n    ...post,\n    category: post.category || \"Music\", // Default to \"Music\" for uncategorized posts\n  }));\n}\n\n/**\n * Get posts by category\n * @param {string} category - The category to filter posts by\n * @returns {Post[]} Array of posts in the specified category\n */\nexport function getPostsByCategory(category: string): Post[] {\n  return getAllPosts().filter((post) => post.category === category);\n}"],"names":[],"mappings":";;;;;;AACA;AACA;AACA;;;;AAEA,uDAAuD;AACvD,MAAM,iBAAiB,CAAA,GAAA,6FAAA,CAAA,OAAI,AAAD,EAAE,QAAQ,GAAG,IAAI;AAMpC,SAAS;IACd,OAAO,2FAAA,CAAA,UAAE,CAAC,WAAW,CAAC;AACxB;AAOO,SAAS,cAAc,IAAY;IACxC,4CAA4C;IAC5C,MAAM,WAAW,KAAK,OAAO,CAAC,SAAS;IACvC,2CAA2C;IAC3C,MAAM,WAAW,CAAA,GAAA,6FAAA,CAAA,OAAI,AAAD,EAAE,gBAAgB,GAAG,SAAS,GAAG,CAAC;IACtD,yBAAyB;IACzB,MAAM,eAAe,2FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,UAAU;IAC/C,sDAAsD;IACtD,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,CAAA,GAAA,uIAAA,CAAA,UAAM,AAAD,EAAE;IAEjC,iDAAiD;IACjD,OAAO;QAAE,GAAG,IAAI;QAAE,MAAM;QAAU;IAAQ;AAC5C;AAMO,SAAS;IACd,MAAM,QAAQ;IACd,MAAM,QAAQ,MACX,GAAG,CAAC,CAAC,OAAS,cAAc,OAC5B,IAAI,CAAC,CAAC,OAAO,QAAW,MAAM,IAAI,GAAG,MAAM,IAAI,GAAG,CAAC,IAAI;IAC1D,OAAO,MAAM,GAAG,CAAC,CAAC,OAAS,CAAC;YAC1B,GAAG,IAAI;YACP,UAAU,KAAK,QAAQ,IAAI;QAC7B,CAAC;AACH;AAOO,SAAS,mBAAmB,QAAgB;IACjD,OAAO,cAAc,MAAM,CAAC,CAAC,OAAS,KAAK,QAAQ,KAAK;AAC1D"}},
    {"offset": {"line": 67, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 143, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/lib/markdownToHtml.ts"],"sourcesContent":["import { remark } from \"remark\";\nimport html from \"remark-html\";\n\n/**\n * Convert markdown string to HTML\n * @param {string} markdown - The markdown content to convert\n * @returns {Promise<string>} The HTML string converted from markdown\n */\nexport default async function markdownToHtml(markdown: string) {\n  // Process the markdown content using remark and remark-html\n  const result = await remark().use(html).process(markdown);\n  // Return the HTML string\n  return result.toString();\n}"],"names":[],"mappings":";;;AAAA;AACA;;;AAOe,eAAe,eAAe,QAAgB;IAC3D,4DAA4D;IAC5D,MAAM,SAAS,MAAM,CAAA,GAAA,+HAAA,CAAA,SAAM,AAAD,IAAI,GAAG,CAAC,8IAAA,CAAA,UAAI,EAAE,OAAO,CAAC;IAChD,yBAAyB;IACzB,OAAO,OAAO,QAAQ;AACxB"}},
    {"offset": {"line": 156, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 162, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/_components/alert.tsx"],"sourcesContent":["import Container from \"@/app/_components/container\";\n\ntype Props = {\n  preview?: boolean;\n};\n\nconst Alert = ({ preview }: Props) => {\n  if (!preview) return null;\n  \n  return (\n    <div className=\"bg-neutral-800 border-neutral-800 text-white\">\n      <Container>\n        <div className=\"py-2 text-center text-sm\">\n          This page is a preview.{\" \"}\n          <a\n            href=\"/api/exit-preview\"\n            className=\"underline hover:text-teal-300 duration-200 transition-colors\"\n          >\n            Click here\n          </a>{\" \"}\n          to exit preview mode.\n        </div>\n      </Container>\n    </div>\n  );\n};\n\nexport default Alert;\n"],"names":[],"mappings":";;;;AAAA;;;AAMA,MAAM,QAAQ,CAAC,EAAE,OAAO,EAAS;IAC/B,IAAI,CAAC,SAAS,OAAO;IAErB,qBACE,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC,uIAAA,CAAA,UAAS;sBACR,cAAA,8OAAC;gBAAI,WAAU;;oBAA2B;oBAChB;kCACxB,8OAAC;wBACC,MAAK;wBACL,WAAU;kCACX;;;;;;oBAEI;oBAAI;;;;;;;;;;;;;;;;;AAMnB;uCAEe"}},
    {"offset": {"line": 208, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 213, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/_components/markdown-styles.module.css [app-client] (css module)"],"sourcesContent":["__turbopack_export_value__({\n  \"markdown\": \"markdown-styles-module__3QwRAG__markdown\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA"}},
    {"offset": {"line": 216, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 222, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/_components/post-body.tsx"],"sourcesContent":["import markdownStyles from \"./markdown-styles.module.css\";\n\n/**\n * PostBody component\n * Renders the main content of a blog post\n */\ntype Props = {\n  content: string;  // HTML content converted from markdown\n};\n\nexport function PostBody({ content }: Props) {\n  return (\n    <div className=\"max-w-2xl mx-auto\">\n      {/* Render the HTML content with markdown styling */}\n      <div\n        className={markdownStyles[\"markdown\"]}\n        dangerouslySetInnerHTML={{ __html: content }}\n      />\n    </div>\n  );\n}"],"names":[],"mappings":";;;;AAAA;;;AAUO,SAAS,SAAS,EAAE,OAAO,EAAS;IACzC,qBACE,8OAAC;QAAI,WAAU;kBAEb,cAAA,8OAAC;YACC,WAAW,8JAAA,CAAA,UAAc,CAAC,WAAW;YACrC,yBAAyB;gBAAE,QAAQ;YAAQ;;;;;;;;;;;AAInD"}},
    {"offset": {"line": 248, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 254, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/_components/avatar.tsx"],"sourcesContent":["/**\n * Avatar component\n * Displays an author's profile picture and name\n */\ntype Props = {\n  name: string;   // Author's name\n  picture: string; // URL to author's profile picture\n};\n\nconst Avatar = ({ name, picture }: Props) => {\n  return (\n    <div className=\"flex items-center\">\n      {/* Author's profile picture */}\n      <img src={picture} className=\"w-12 h-12 rounded-full mr-4\" alt={name} />\n      {/* Author's name */}\n      <div className=\"text-xl font-bold\">{name}</div>\n    </div>\n  );\n};\n\nexport default Avatar;"],"names":[],"mappings":"AAAA;;;CAGC;;;;;AAMD,MAAM,SAAS,CAAC,EAAE,IAAI,EAAE,OAAO,EAAS;IACtC,qBACE,8OAAC;QAAI,WAAU;;0BAEb,8OAAC;gBAAI,KAAK;gBAAS,WAAU;gBAA8B,KAAK;;;;;;0BAEhE,8OAAC;gBAAI,WAAU;0BAAqB;;;;;;;;;;;;AAG1C;uCAEe"}},
    {"offset": {"line": 291, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 297, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/_components/cover-image.tsx"],"sourcesContent":["import cn from \"classnames\";\nimport Link from \"next/link\";\nimport Image from \"next/image\";\n\n/**\n * CoverImage component\n * Displays a cover image for a post, optionally with a link\n */\ntype Props = {\n  title: string;  // Title for alt text\n  src: string;    // Image source URL\n  slug?: string;  // Optional slug for linking to post\n};\n\nconst CoverImage = ({ title, src, slug }: Props) => {\n  // Create the image element with appropriate styling\n  const image = (\n    <Image\n      src={src}\n      alt={`Cover Image for ${title}`}\n      className={cn(\"shadow-sm w-full\", {\n        \"hover:shadow-lg transition-shadow duration-200\": slug, // Add hover effect if it's a link\n      })}\n      width={1300}\n      height={630}\n    />\n  );\n  \n  return (\n    <div className=\"sm:mx-0\">\n      {slug ? (\n        // If slug is provided, wrap image in a link to the post\n        <Link href={`/posts/${slug}`} aria-label={title}>\n          {image}\n        </Link>\n      ) : (\n        // Otherwise, just render the image\n        image\n      )}\n    </div>\n  );\n};\n\nexport default CoverImage;"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;;AAYA,MAAM,aAAa,CAAC,EAAE,KAAK,EAAE,GAAG,EAAE,IAAI,EAAS;IAC7C,oDAAoD;IACpD,MAAM,sBACJ,8OAAC,6HAAA,CAAA,UAAK;QACJ,KAAK;QACL,KAAK,CAAC,gBAAgB,EAAE,OAAO;QAC/B,WAAW,CAAA,GAAA,mIAAA,CAAA,UAAE,AAAD,EAAE,oBAAoB;YAChC,kDAAkD;QACpD;QACA,OAAO;QACP,QAAQ;;;;;;IAIZ,qBACE,8OAAC;QAAI,WAAU;kBACZ,OACC,wDAAwD;sBACxD,8OAAC,4HAAA,CAAA,UAAI;YAAC,MAAM,CAAC,OAAO,EAAE,MAAM;YAAE,cAAY;sBACvC;;;;;mBAGH,mCAAmC;QACnC;;;;;;AAIR;uCAEe"}},
    {"offset": {"line": 343, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 349, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/_components/date-formatter.tsx"],"sourcesContent":["import { parseISO, format } from \"date-fns\";\n\n/**\n * DateFormatter component\n * Formats a date string into a human-readable format\n */\ntype Props = {\n  dateString: string;  // ISO date string\n};\n\nconst DateFormatter = ({ dateString }: Props) => {\n  // Parse the ISO date string into a Date object\n  const date = parseISO(dateString);\n  // Format the date using date-fns (e.g., \"January 1, 2025\")\n  return <time dateTime={dateString}>{format(date, \"LLLL\td, yyyy\")}</time>;\n};\n\nexport default DateFormatter;"],"names":[],"mappings":";;;;AAAA;AAAA;;;AAUA,MAAM,gBAAgB,CAAC,EAAE,UAAU,EAAS;IAC1C,+CAA+C;IAC/C,MAAM,OAAO,CAAA,GAAA,wIAAA,CAAA,WAAQ,AAAD,EAAE;IACtB,2DAA2D;IAC3D,qBAAO,8OAAC;QAAK,UAAU;kBAAa,CAAA,GAAA,sJAAA,CAAA,SAAM,AAAD,EAAE,MAAM;;;;;;AACnD;uCAEe"}},
    {"offset": {"line": 371, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 377, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/_components/post-title.tsx"],"sourcesContent":["import { ReactNode } from \"react\";\n\n/**\n * PostTitle component\n * Displays the title of a blog post with appropriate styling\n */\ntype Props = {\n  children?: ReactNode;  // Title content\n};\n\nexport function PostTitle({ children }: Props) {\n  return (\n    <h1 className=\"text-5xl md:text-7xl lg:text-8xl font-bold tracking-tighter leading-tight md:leading-none mb-12 text-center md:text-left\">\n      {children}\n    </h1>\n  );\n}"],"names":[],"mappings":";;;;;AAUO,SAAS,UAAU,EAAE,QAAQ,EAAS;IAC3C,qBACE,8OAAC;QAAG,WAAU;kBACX;;;;;;AAGP"}},
    {"offset": {"line": 392, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 398, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/_components/post-header.tsx"],"sourcesContent":["import Avatar from \"./avatar\";\nimport CoverImage from \"./cover-image\";\nimport DateFormatter from \"./date-formatter\";\nimport { PostTitle } from \"@/app/_components/post-title\";\nimport { type Author } from \"@/interfaces/author\";\n\n/**\n * PostHeader component\n * Displays the header section of a blog post including title, cover image, date, and author\n */\ntype Props = {\n  title: string;       // Post title\n  coverImage: string;  // URL to cover image\n  date: string;        // Publication date\n  author: Author;      // Author information\n};\n\nexport function PostHeader({ title, coverImage, date, author }: Props) {\n  return (\n    <>\n      {/* Post title */}\n      <PostTitle>{title}</PostTitle>\n      \n      {/* Author information (desktop view) */}\n      <div className=\"hidden md:block md:mb-12\">\n        <Avatar name={author.name} picture={author.picture} />\n      </div>\n      \n      {/* Cover image */}\n      <div className=\"mb-8 md:mb-16 sm:mx-0\">\n        <CoverImage title={title} src={coverImage} />\n      </div>\n      \n      <div className=\"max-w-2xl mx-auto\">\n        {/* Author information (mobile view) */}\n        <div className=\"block md:hidden mb-6\">\n          <Avatar name={author.name} picture={author.picture} />\n        </div>\n        \n        {/* Publication date */}\n        <div className=\"mb-6 text-lg\">\n          <DateFormatter dateString={date} />\n        </div>\n      </div>\n    </>\n  );\n}"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;;;;;;AAcO,SAAS,WAAW,EAAE,KAAK,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,EAAS;IACnE,qBACE;;0BAEE,8OAAC,2IAAA,CAAA,YAAS;0BAAE;;;;;;0BAGZ,8OAAC;gBAAI,WAAU;0BACb,cAAA,8OAAC,oIAAA,CAAA,UAAM;oBAAC,MAAM,OAAO,IAAI;oBAAE,SAAS,OAAO,OAAO;;;;;;;;;;;0BAIpD,8OAAC;gBAAI,WAAU;0BACb,cAAA,8OAAC,4IAAA,CAAA,UAAU;oBAAC,OAAO;oBAAO,KAAK;;;;;;;;;;;0BAGjC,8OAAC;gBAAI,WAAU;;kCAEb,8OAAC;wBAAI,WAAU;kCACb,cAAA,8OAAC,oIAAA,CAAA,UAAM;4BAAC,MAAM,OAAO,IAAI;4BAAE,SAAS,OAAO,OAAO;;;;;;;;;;;kCAIpD,8OAAC;wBAAI,WAAU;kCACb,cAAA,8OAAC,+IAAA,CAAA,UAAa;4BAAC,YAAY;;;;;;;;;;;;;;;;;;;AAKrC"}},
    {"offset": {"line": 492, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 498, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/posts/[slug]/page.tsx"],"sourcesContent":["import { Metadata } from \"next\";\nimport { notFound } from \"next/navigation\";\nimport { getAllPosts, getPostBySlug } from \"@/lib/api\";\nimport { SITE_NAME } from \"@/lib/constants\";\nimport markdownToHtml from \"@/lib/markdownToHtml\";\nimport Alert from \"@/app/_components/alert\";\nimport Container from \"@/app/_components/container\";\nimport Header from \"@/app/_components/header\";\nimport { PostBody } from \"@/app/_components/post-body\";\nimport { PostHeader } from \"@/app/_components/post-header\";\n\n/**\n * Individual blog post page component\n * Renders a single blog post based on the slug parameter\n */\nexport default async function Post(props: Params) {\n  // Extract the slug parameter from props\n  const params = await props.params;\n  // Get the post data for the given slug\n  const post = getPostBySlug(params.slug);\n\n  // If post not found, return 404\n  if (!post) {\n    return notFound();\n  }\n\n  // Convert the markdown content to HTML\n  const content = await markdownToHtml(post.content || \"\");\n\n  return (\n    <main>\n      {/* Alert banner for preview mode */}\n      <Alert preview={post.preview} />\n      <Container>\n        <Header />\n        <article className=\"mb-32\">\n          {/* Post header with title, cover image, date, and author */}\n          <PostHeader\n            title={post.title}\n            coverImage={post.coverImage}\n            date={post.date}\n            author={post.author}\n          />\n          {/* Post body with the HTML content */}\n          <PostBody content={content} />\n        </article>\n      </Container>\n    </main>\n  );\n}\n\n// Type definition for the page parameters\ntype Params = {\n  params: Promise<{\n    slug: string;\n  }>;\n};\n\n/**\n * Generate metadata for the post page (for SEO)\n */\nexport async function generateMetadata(props: Params): Promise<Metadata> {\n  const params = await props.params;\n  const post = getPostBySlug(params.slug);\n\n  if (!post) {\n    return notFound();\n  }\n\n  const title = `${post.title} | ${SITE_NAME}`;\n\n  return {\n    title,\n    openGraph: {\n      title,\n      images: [post.ogImage.url],\n    },\n  };\n}\n\n/**\n * Generate static paths for all posts at build time\n * This enables static generation of all post pages\n */\nexport async function generateStaticParams() {\n  const posts = getAllPosts();\n\n  return posts.map((post) => ({\n    slug: post.slug,\n  }));\n}\n"],"names":[],"mappings":";;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;;;;;;;;;;;AAce,eAAe,KAAK,KAAa;IAC9C,wCAAwC;IACxC,MAAM,SAAS,MAAM,MAAM,MAAM;IACjC,uCAAuC;IACvC,MAAM,OAAO,CAAA,GAAA,iHAAA,CAAA,gBAAa,AAAD,EAAE,OAAO,IAAI;IAEtC,gCAAgC;IAChC,IAAI,CAAC,MAAM;QACT,OAAO,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD;IAChB;IAEA,uCAAuC;IACvC,MAAM,UAAU,MAAM,CAAA,GAAA,4HAAA,CAAA,UAAc,AAAD,EAAE,KAAK,OAAO,IAAI;IAErD,qBACE,8OAAC;;0BAEC,8OAAC,mIAAA,CAAA,UAAK;gBAAC,SAAS,KAAK,OAAO;;;;;;0BAC5B,8OAAC,uIAAA,CAAA,UAAS;;kCACR,8OAAC,oIAAA,CAAA,UAAM;;;;;kCACP,8OAAC;wBAAQ,WAAU;;0CAEjB,8OAAC,4IAAA,CAAA,aAAU;gCACT,OAAO,KAAK,KAAK;gCACjB,YAAY,KAAK,UAAU;gCAC3B,MAAM,KAAK,IAAI;gCACf,QAAQ,KAAK,MAAM;;;;;;0CAGrB,8OAAC,0IAAA,CAAA,WAAQ;gCAAC,SAAS;;;;;;;;;;;;;;;;;;;;;;;;AAK7B;AAYO,eAAe,iBAAiB,KAAa;IAClD,MAAM,SAAS,MAAM,MAAM,MAAM;IACjC,MAAM,OAAO,CAAA,GAAA,iHAAA,CAAA,gBAAa,AAAD,EAAE,OAAO,IAAI;IAEtC,IAAI,CAAC,MAAM;QACT,OAAO,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD;IAChB;IAEA,MAAM,QAAQ,GAAG,KAAK,KAAK,CAAC,GAAG,EAAE,uHAAA,CAAA,YAAS,EAAE;IAE5C,OAAO;QACL;QACA,WAAW;YACT;YACA,QAAQ;gBAAC,KAAK,OAAO,CAAC,GAAG;aAAC;QAC5B;IACF;AACF;AAMO,eAAe;IACpB,MAAM,QAAQ,CAAA,GAAA,iHAAA,CAAA,cAAW,AAAD;IAExB,OAAO,MAAM,GAAG,CAAC,CAAC,OAAS,CAAC;YAC1B,MAAM,KAAK,IAAI;QACjB,CAAC;AACH"}},
    {"offset": {"line": 613, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 624, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 624, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}