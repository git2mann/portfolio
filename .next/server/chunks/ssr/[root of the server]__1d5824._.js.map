{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/lib/api.ts"],"sourcesContent":["import { Post } from \"@/interfaces/post\";\nimport fs from \"fs\";\nimport matter from \"gray-matter\";\nimport { join } from \"path\";\n\n// Define the directory where Markdown posts are stored\nconst postsDirectory = join(process.cwd(), \"_posts\");\n\n/**\n * Get all post slugs from the _posts directory\n * @returns {string[]} Array of filenames in the posts directory\n */\nexport function getPostSlugs() {\n  return fs.readdirSync(postsDirectory);\n}\n\n/**\n * Get a single post by its slug\n * @param {string} slug - The slug of the post to retrieve\n * @returns {Post} The post data including frontmatter and content\n */\nexport function getPostBySlug(slug: string) {\n  // Remove .md extension from slug if present\n  const realSlug = slug.replace(/\\.md$/, \"\");\n  // Construct the full path to the post file\n  const fullPath = join(postsDirectory, `${realSlug}.md`);\n  // Read the file contents\n  const fileContents = fs.readFileSync(fullPath, \"utf8\");\n  // Parse the frontmatter and content using gray-matter\n  const { data, content } = matter(fileContents);\n\n  // Return the post data with the slug and content\n  return { ...data, slug: realSlug, content } as Post;\n}\n\n/**\n * Get all posts sorted by date\n * @returns {Post[]} Array of all posts sorted by date (newest first)\n */\nexport function getAllPosts(): Post[] {\n  const slugs = getPostSlugs();\n  const posts = slugs\n    .map((slug) => getPostBySlug(slug))\n    .sort((post1, post2) => (post1.date > post2.date ? -1 : 1));\n  return posts.map((post) => ({\n    ...post,\n    category: post.category || \"Music\", // Default to \"Music\" for uncategorized posts\n  }));\n}\n\n/**\n * Get posts by category\n * @param {string} category - The category to filter posts by\n * @returns {Post[]} Array of posts in the specified category\n */\nexport function getPostsByCategory(category: string): Post[] {\n  return getAllPosts().filter((post) => post.category === category);\n}"],"names":[],"mappings":";;;;;;AACA;AACA;AACA;;;;AAEA,uDAAuD;AACvD,MAAM,iBAAiB,CAAA,GAAA,6FAAA,CAAA,OAAI,AAAD,EAAE,QAAQ,GAAG,IAAI;AAMpC,SAAS;IACd,OAAO,2FAAA,CAAA,UAAE,CAAC,WAAW,CAAC;AACxB;AAOO,SAAS,cAAc,IAAY;IACxC,4CAA4C;IAC5C,MAAM,WAAW,KAAK,OAAO,CAAC,SAAS;IACvC,2CAA2C;IAC3C,MAAM,WAAW,CAAA,GAAA,6FAAA,CAAA,OAAI,AAAD,EAAE,gBAAgB,GAAG,SAAS,GAAG,CAAC;IACtD,yBAAyB;IACzB,MAAM,eAAe,2FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,UAAU;IAC/C,sDAAsD;IACtD,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,CAAA,GAAA,uIAAA,CAAA,UAAM,AAAD,EAAE;IAEjC,iDAAiD;IACjD,OAAO;QAAE,GAAG,IAAI;QAAE,MAAM;QAAU;IAAQ;AAC5C;AAMO,SAAS;IACd,MAAM,QAAQ;IACd,MAAM,QAAQ,MACX,GAAG,CAAC,CAAC,OAAS,cAAc,OAC5B,IAAI,CAAC,CAAC,OAAO,QAAW,MAAM,IAAI,GAAG,MAAM,IAAI,GAAG,CAAC,IAAI;IAC1D,OAAO,MAAM,GAAG,CAAC,CAAC,OAAS,CAAC;YAC1B,GAAG,IAAI;YACP,UAAU,KAAK,QAAQ,IAAI;QAC7B,CAAC;AACH;AAOO,SAAS,mBAAmB,QAAgB;IACjD,OAAO,cAAc,MAAM,CAAC,CAAC,OAAS,KAAK,QAAQ,KAAK;AAC1D"}},
    {"offset": {"line": 67, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 73, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/_components/date-formatter.tsx"],"sourcesContent":["import { parseISO, format } from \"date-fns\";\n\n/**\n * DateFormatter component\n * Formats a date string into a human-readable format\n */\ntype Props = {\n  dateString: string;  // ISO date string\n};\n\nconst DateFormatter = ({ dateString }: Props) => {\n  // Parse the ISO date string into a Date object\n  const date = parseISO(dateString);\n  // Format the date using date-fns (e.g., \"January 1, 2025\")\n  return <time dateTime={dateString}>{format(date, \"LLLL\td, yyyy\")}</time>;\n};\n\nexport default DateFormatter;"],"names":[],"mappings":";;;;AAAA;AAAA;;;AAUA,MAAM,gBAAgB,CAAC,EAAE,UAAU,EAAS;IAC1C,+CAA+C;IAC/C,MAAM,OAAO,CAAA,GAAA,wIAAA,CAAA,WAAQ,AAAD,EAAE;IACtB,2DAA2D;IAC3D,qBAAO,8OAAC;QAAK,UAAU;kBAAa,CAAA,GAAA,sJAAA,CAAA,SAAM,AAAD,EAAE,MAAM;;;;;;AACnD;uCAEe"}},
    {"offset": {"line": 95, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 101, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/blog/tech/page.tsx"],"sourcesContent":["import Container from \"@/app/_components/container\";\nimport { getPostsByCategory } from \"@/lib/api\";\nimport Link from \"next/link\";\nimport Image from \"next/image\";\nimport DateFormatter from \"@/app/_components/date-formatter\";\n\nexport default function TechBlogPage() {\n  const techPosts = getPostsByCategory(\"Tech\");\n\n  return (\n    <main className=\"min-h-screen bg-gray-50 dark:bg-slate-900\">\n      <Container>\n        <div className=\"max-w-6xl mx-auto\">\n          <h1 className=\"text-5xl md:text-7xl font-bold tracking-tight leading-tight mb-12 text-center animate-fade-in\">\n            Tech Blog\n          </h1>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {techPosts.map((post) => (\n              <article\n                key={post.slug}\n                className=\"bg-white dark:bg-slate-800 rounded-lg overflow-hidden shadow-md hover:shadow-lg transform hover:scale-105 transition duration-300 ease-in-out\"\n              >\n                <Link href={`/posts/${post.slug}`}>\n                  <div className=\"relative h-64\">\n                    <Image\n                      src={post.coverImage}\n                      alt={`Cover Image for ${post.title}`}\n                      fill\n                      className=\"object-cover transition-transform duration-300 group-hover:scale-105\"\n                    />\n                  </div>\n                  <div className=\"p-6\">\n                    <h3 className=\"text-xl font-semibold mb-2 text-gray-800 dark:text-gray-100 group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors\">\n                      {post.title}\n                    </h3>\n                    <p className=\"text-gray-600 dark:text-gray-300 mb-4\">\n                      {post.excerpt}\n                    </p>\n                    <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n                      <DateFormatter dateString={post.date} />\n                    </p>\n                  </div>\n                </Link>\n              </article>\n            ))}\n          </div>\n        </div>\n      </Container>\n    </main>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;;;;;;;AAEe,SAAS;IACtB,MAAM,YAAY,CAAA,GAAA,iHAAA,CAAA,qBAAkB,AAAD,EAAE;IAErC,qBACE,8OAAC;QAAK,WAAU;kBACd,cAAA,8OAAC,uIAAA,CAAA,UAAS;sBACR,cAAA,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAG,WAAU;kCAAgG;;;;;;kCAG9G,8OAAC;wBAAI,WAAU;kCACZ,UAAU,GAAG,CAAC,CAAC,qBACd,8OAAC;gCAEC,WAAU;0CAEV,cAAA,8OAAC,4HAAA,CAAA,UAAI;oCAAC,MAAM,CAAC,OAAO,EAAE,KAAK,IAAI,EAAE;;sDAC/B,8OAAC;4CAAI,WAAU;sDACb,cAAA,8OAAC,6HAAA,CAAA,UAAK;gDACJ,KAAK,KAAK,UAAU;gDACpB,KAAK,CAAC,gBAAgB,EAAE,KAAK,KAAK,EAAE;gDACpC,IAAI;gDACJ,WAAU;;;;;;;;;;;sDAGd,8OAAC;4CAAI,WAAU;;8DACb,8OAAC;oDAAG,WAAU;8DACX,KAAK,KAAK;;;;;;8DAEb,8OAAC;oDAAE,WAAU;8DACV,KAAK,OAAO;;;;;;8DAEf,8OAAC;oDAAE,WAAU;8DACX,cAAA,8OAAC,+IAAA,CAAA,UAAa;wDAAC,YAAY,KAAK,IAAI;;;;;;;;;;;;;;;;;;;;;;;+BApBrC,KAAK,IAAI;;;;;;;;;;;;;;;;;;;;;;;;;;AA+B9B"}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 239, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 239, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}