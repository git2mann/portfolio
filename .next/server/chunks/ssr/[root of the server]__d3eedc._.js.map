{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/lib/api.ts"],"sourcesContent":["import { Post } from \"@/interfaces/post\";\nimport fs from \"fs\";\nimport matter from \"gray-matter\";\nimport { join } from \"path\";\n\n// Define the directory where Markdown posts are stored\nconst postsDirectory = join(process.cwd(), \"_posts\");\n\n/**\n * Get all post slugs from the _posts directory\n * @returns {string[]} Array of filenames in the posts directory\n */\nexport function getPostSlugs() {\n  return fs.readdirSync(postsDirectory);\n}\n\n/**\n * Get a single post by its slug\n * @param {string} slug - The slug of the post to retrieve\n * @returns {Post} The post data including frontmatter and content\n */\nexport function getPostBySlug(slug: string) {\n  // Remove .md extension from slug if present\n  const realSlug = slug.replace(/\\.md$/, \"\");\n  // Construct the full path to the post file\n  const fullPath = join(postsDirectory, `${realSlug}.md`);\n  // Read the file contents\n  const fileContents = fs.readFileSync(fullPath, \"utf8\");\n  // Parse the frontmatter and content using gray-matter\n  const { data, content } = matter(fileContents);\n\n  // Return the post data with the slug and content\n  return { ...data, slug: realSlug, content } as Post;\n}\n\n/**\n * Get all posts sorted by date\n * @returns {Post[]} Array of all posts sorted by date (newest first)\n */\nexport function getAllPosts(): Post[] {\n  const slugs = getPostSlugs();\n  const posts = slugs\n    .map((slug) => getPostBySlug(slug))\n    .sort((post1, post2) => (post1.date > post2.date ? -1 : 1));\n  return posts.map((post) => ({\n    ...post,\n    category: post.category || \"Music\", // Default to \"Music\" for uncategorized posts\n  }));\n}\n\n/**\n * Get posts by category\n * @param {string} category - The category to filter posts by\n * @returns {Post[]} Array of posts in the specified category\n */\nexport function getPostsByCategory(category: string): Post[] {\n  return getAllPosts().filter((post) => post.category === category);\n}"],"names":[],"mappings":";;;;;;AACA;AACA;AACA;;;;AAEA,uDAAuD;AACvD,MAAM,iBAAiB,CAAA,GAAA,6FAAA,CAAA,OAAI,AAAD,EAAE,QAAQ,GAAG,IAAI;AAMpC,SAAS;IACd,OAAO,2FAAA,CAAA,UAAE,CAAC,WAAW,CAAC;AACxB;AAOO,SAAS,cAAc,IAAY;IACxC,4CAA4C;IAC5C,MAAM,WAAW,KAAK,OAAO,CAAC,SAAS;IACvC,2CAA2C;IAC3C,MAAM,WAAW,CAAA,GAAA,6FAAA,CAAA,OAAI,AAAD,EAAE,gBAAgB,GAAG,SAAS,GAAG,CAAC;IACtD,yBAAyB;IACzB,MAAM,eAAe,2FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,UAAU;IAC/C,sDAAsD;IACtD,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,CAAA,GAAA,uIAAA,CAAA,UAAM,AAAD,EAAE;IAEjC,iDAAiD;IACjD,OAAO;QAAE,GAAG,IAAI;QAAE,MAAM;QAAU;IAAQ;AAC5C;AAMO,SAAS;IACd,MAAM,QAAQ;IACd,MAAM,QAAQ,MACX,GAAG,CAAC,CAAC,OAAS,cAAc,OAC5B,IAAI,CAAC,CAAC,OAAO,QAAW,MAAM,IAAI,GAAG,MAAM,IAAI,GAAG,CAAC,IAAI;IAC1D,OAAO,MAAM,GAAG,CAAC,CAAC,OAAS,CAAC;YAC1B,GAAG,IAAI;YACP,UAAU,KAAK,QAAQ,IAAI;QAC7B,CAAC;AACH;AAOO,SAAS,mBAAmB,QAAgB;IACjD,OAAO,cAAc,MAAM,CAAC,CAAC,OAAS,KAAK,QAAQ,KAAK;AAC1D"}},
    {"offset": {"line": 67, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 73, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/_components/date-formatter.tsx"],"sourcesContent":["import { parseISO, format } from \"date-fns\";\n\n/**\n * DateFormatter component\n * Formats a date string into a human-readable format\n */\ntype Props = {\n  dateString: string;  // ISO date string\n};\n\nconst DateFormatter = ({ dateString }: Props) => {\n  // Parse the ISO date string into a Date object\n  const date = parseISO(dateString);\n  // Format the date using date-fns (e.g., \"January 1, 2025\")\n  return <time dateTime={dateString}>{format(date, \"LLLL\td, yyyy\")}</time>;\n};\n\nexport default DateFormatter;"],"names":[],"mappings":";;;;AAAA;AAAA;;;AAUA,MAAM,gBAAgB,CAAC,EAAE,UAAU,EAAS;IAC1C,+CAA+C;IAC/C,MAAM,OAAO,CAAA,GAAA,wIAAA,CAAA,WAAQ,AAAD,EAAE;IACtB,2DAA2D;IAC3D,qBAAO,8OAAC;QAAK,UAAU;kBAAa,CAAA,GAAA,sJAAA,CAAA,SAAM,AAAD,EAAE,MAAM;;;;;;AACnD;uCAEe"}},
    {"offset": {"line": 95, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 101, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/blog/page.tsx"],"sourcesContent":["import Container from \"@/app/_components/container\";\nimport Link from \"next/link\";\nimport Image from \"next/image\";\n\nexport default function BlogPage() {\n  return (\n    <main className=\"min-h-screen bg-gray-50 dark:bg-slate-900\">\n      <Container>\n        <div className=\"max-w-6xl mx-auto\">\n          <h1 className=\"text-5xl md:text-7xl font-bold tracking-tight leading-tight mb-12 text-center animate-fade-in\">\n            Blog\n          </h1>\n\n          {/* Category Cards */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n            {[\n              { category: \"Music\", image: \"/assets/blog/music-category.jpg\", link: \"/blog/music\" },\n              { category: \"Tech\", image: \"/assets/blog/tech-category.jpg\", link: \"/blog/tech\" },\n            ].map(({ category, image, link }) => (\n              <Link\n                key={category}\n                href={link}\n                className=\"block bg-white dark:bg-slate-800 rounded-lg overflow-hidden shadow-md hover:shadow-lg transform hover:scale-105 transition duration-300 ease-in-out\"\n              >\n                <div className=\"relative h-48\">\n                  <Image\n                    src={image}\n                    alt={`${category} Category`}\n                    fill\n                    className=\"object-cover\"\n                  />\n                  <div className=\"absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center\">\n                    <h2 className=\"text-3xl font-bold text-white\">{category}</h2>\n                  </div>\n                </div>\n              </Link>\n            ))}\n          </div>\n        </div>\n      </Container>\n    </main>\n  );\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;;AAEe,SAAS;IACtB,qBACE,8OAAC;QAAK,WAAU;kBACd,cAAA,8OAAC,uIAAA,CAAA,UAAS;sBACR,cAAA,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAG,WAAU;kCAAgG;;;;;;kCAK9G,8OAAC;wBAAI,WAAU;kCACZ;4BACC;gCAAE,UAAU;gCAAS,OAAO;gCAAmC,MAAM;4BAAc;4BACnF;gCAAE,UAAU;gCAAQ,OAAO;gCAAkC,MAAM;4BAAa;yBACjF,CAAC,GAAG,CAAC,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,IAAI,EAAE,iBAC9B,8OAAC,4HAAA,CAAA,UAAI;gCAEH,MAAM;gCACN,WAAU;0CAEV,cAAA,8OAAC;oCAAI,WAAU;;sDACb,8OAAC,6HAAA,CAAA,UAAK;4CACJ,KAAK;4CACL,KAAK,GAAG,SAAS,SAAS,CAAC;4CAC3B,IAAI;4CACJ,WAAU;;;;;;sDAEZ,8OAAC;4CAAI,WAAU;sDACb,cAAA,8OAAC;gDAAG,WAAU;0DAAiC;;;;;;;;;;;;;;;;;+BAZ9C;;;;;;;;;;;;;;;;;;;;;;;;;;AAsBrB"}},
    {"offset": {"line": 204, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}