{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/lib/api.ts"],"sourcesContent":["import { Post } from \"@/interfaces/post\";\nimport fs from \"fs\";\nimport matter from \"gray-matter\";\nimport { join } from \"path\";\n\n// Define the directory where Markdown posts are stored\nconst postsDirectory = join(process.cwd(), \"_posts\");\n\n/**\n * Get all post slugs from the _posts directory\n * @returns {string[]} Array of filenames in the posts directory\n */\nexport function getPostSlugs() {\n  return fs.readdirSync(postsDirectory);\n}\n\n/**\n * Get a single post by its slug\n * @param {string} slug - The slug of the post to retrieve\n * @returns {Post} The post data including frontmatter and content\n */\nexport function getPostBySlug(slug: string) {\n  // Remove .md extension from slug if present\n  const realSlug = slug.replace(/\\.md$/, \"\");\n  // Construct the full path to the post file\n  const fullPath = join(postsDirectory, `${realSlug}.md`);\n  // Read the file contents\n  const fileContents = fs.readFileSync(fullPath, \"utf8\");\n  // Parse the frontmatter and content using gray-matter\n  const { data, content } = matter(fileContents);\n\n  // Return the post data with the slug and content\n  return { ...data, slug: realSlug, content } as Post;\n}\n\n/**\n * Get all posts sorted by date\n * @returns {Post[]} Array of all posts sorted by date (newest first)\n */\nexport function getAllPosts(): Post[] {\n  // Get all post slugs\n  const slugs = getPostSlugs();\n  // Map each slug to its post data\n  const posts = slugs\n    .map((slug) => getPostBySlug(slug))\n    // Sort posts by date in descending order (newest first)\n    .sort((post1, post2) => (post1.date > post2.date ? -1 : 1));\n  return posts;\n}"],"names":[],"mappings":";;;;;AACA;AACA;AACA;;;;AAEA,uDAAuD;AACvD,MAAM,iBAAiB,CAAA,GAAA,6FAAA,CAAA,OAAI,AAAD,EAAE,QAAQ,GAAG,IAAI;AAMpC,SAAS;IACd,OAAO,2FAAA,CAAA,UAAE,CAAC,WAAW,CAAC;AACxB;AAOO,SAAS,cAAc,IAAY;IACxC,4CAA4C;IAC5C,MAAM,WAAW,KAAK,OAAO,CAAC,SAAS;IACvC,2CAA2C;IAC3C,MAAM,WAAW,CAAA,GAAA,6FAAA,CAAA,OAAI,AAAD,EAAE,gBAAgB,GAAG,SAAS,GAAG,CAAC;IACtD,yBAAyB;IACzB,MAAM,eAAe,2FAAA,CAAA,UAAE,CAAC,YAAY,CAAC,UAAU;IAC/C,sDAAsD;IACtD,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,CAAA,GAAA,uIAAA,CAAA,UAAM,AAAD,EAAE;IAEjC,iDAAiD;IACjD,OAAO;QAAE,GAAG,IAAI;QAAE,MAAM;QAAU;IAAQ;AAC5C;AAMO,SAAS;IACd,qBAAqB;IACrB,MAAM,QAAQ;IACd,iCAAiC;IACjC,MAAM,QAAQ,MACX,GAAG,CAAC,CAAC,OAAS,cAAc,MAC7B,wDAAwD;KACvD,IAAI,CAAC,CAAC,OAAO,QAAW,MAAM,IAAI,GAAG,MAAM,IAAI,GAAG,CAAC,IAAI;IAC1D,OAAO;AACT"}},
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 69, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/_components/date-formatter.tsx"],"sourcesContent":["import { parseISO, format } from \"date-fns\";\n\n/**\n * DateFormatter component\n * Formats a date string into a human-readable format\n */\ntype Props = {\n  dateString: string;  // ISO date string\n};\n\nconst DateFormatter = ({ dateString }: Props) => {\n  // Parse the ISO date string into a Date object\n  const date = parseISO(dateString);\n  // Format the date using date-fns (e.g., \"January 1, 2025\")\n  return <time dateTime={dateString}>{format(date, \"LLLL\td, yyyy\")}</time>;\n};\n\nexport default DateFormatter;"],"names":[],"mappings":";;;;AAAA;AAAA;;;AAUA,MAAM,gBAAgB,CAAC,EAAE,UAAU,EAAS;IAC1C,+CAA+C;IAC/C,MAAM,OAAO,CAAA,GAAA,wIAAA,CAAA,WAAQ,AAAD,EAAE;IACtB,2DAA2D;IAC3D,qBAAO,8OAAC;QAAK,UAAU;kBAAa,CAAA,GAAA,sJAAA,CAAA,SAAM,AAAD,EAAE,MAAM;;;;;;AACnD;uCAEe"}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 97, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/blog/page.tsx"],"sourcesContent":["import Container from \"@/app/_components/container\";\n//import Header from \"@/app/_components/header\";\nimport { getAllPosts } from \"@/lib/api\";\nimport Link from \"next/link\";\nimport Image from \"next/image\";\nimport DateFormatter from \"@/app/_components/date-formatter\";\n\nexport default function BlogPage() {\n  const allPosts = getAllPosts();\n\n  // Group posts by year\n  const postsByYear = allPosts.reduce((acc, post) => {\n    const year = new Date(post.date).getFullYear();\n    if (!acc[year]) {\n      acc[year] = [];\n    }\n    acc[year].push(post);\n    return acc;\n  }, {} as Record<number, typeof allPosts>);\n\n  // Sort years in descending order\n  const years = Object.keys(postsByYear)\n    .map(Number)\n    .sort((a, b) => b - a);\n\n  return (\n    <main className=\"min-h-screen\">\n      <Container>\n        \n        <div className=\"max-w-6xl mx-auto\">\n          <h1 className=\"text-5xl md:text-7xl font-bold tracking-tighter leading-tight mb-8 animate-fade-in\">\n            Blog\n          </h1>\n\n          {/* Featured Post */}\n          {allPosts[0] && (\n            <div className=\"mb-16 animate-slide-up\">\n              <Link href={`/posts/${allPosts[0].slug}`}>\n                <div className=\"group relative h-[60vh] overflow-hidden rounded-xl\">\n                  <Image\n                    src={allPosts[0].coverImage}\n                    alt={`Cover Image for ${allPosts[0].title}`}\n                    fill\n                    className=\"object-cover transition-transform duration-300 group-hover:scale-105\"\n                  />\n                  <div className=\"absolute inset-0 bg-gradient-to-t from-black/70 to-transparent\">\n                    <div className=\"absolute bottom-0 p-8\">\n                      <p className=\"text-white/70 mb-2\">\n                        <DateFormatter dateString={allPosts[0].date} />\n                      </p>\n                      <h2 className=\"text-4xl font-bold text-white mb-4\">{allPosts[0].title}</h2>\n                      <p className=\"text-white/90 text-lg max-w-2xl\">{allPosts[0].excerpt}</p>\n                    </div>\n                  </div>\n                </div>\n              </Link>\n            </div>\n          )}\n\n          {/* Posts by Year */}\n          {years.map((year) => (\n            <section key={year} className=\"mb-16 animate-fade-in\">\n              <h2 className=\"text-3xl font-bold mb-8 sticky top-0 bg-white/80 dark:bg-slate-900/80 backdrop-blur-sm py-4 z-10\">\n                {year}\n              </h2>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\"> \n                {postsByYear[year].map((post) => (\n                  <article \n                    key={post.slug} \n                    className=\"bg-white dark:bg-slate-800 rounded-lg overflow-hidden shadow-md hover:shadow-lg transform hover:scale-105 transition duration-300 ease-in-out\" \n                  >\n                    <Link href={`/posts/${post.slug}`}>\n                      <div className=\"relative h-64\">\n                        <Image\n                          src={post.coverImage}\n                          alt={`Cover Image for ${post.title}`}\n                          fill\n                          className=\"object-cover transition-transform duration-300 group-hover:scale-105\"\n                        />\n                        {/* Content type indicator */}\n                        <div className=\"absolute top-4 right-4 px-3 py-1 rounded-full bg-black/70 text-white text-sm\">\n                          {post.coverImage.includes('.mp4') ? 'üé• Video' : \n                           post.coverImage.includes('.mp3') ? 'üéµ Audio' : \n                           'üìù Article'}\n                        </div>\n                      </div>\n                      <div className=\"p-6\">\n                        <div className=\"flex items-center mb-4\">\n                          <Image\n                            src={post.author.picture}\n                            alt={post.author.name}\n                            width={40}\n                            height={40}\n                            className=\"rounded-full\"\n                          />\n                          <div className=\"ml-3\">\n                            <p className=\"font-medium\">{post.author.name}</p>\n                            <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n                              <DateFormatter dateString={post.date} />\n                            </p>\n                          </div>\n                        </div>\n                        <h3 className=\"text-2xl font-bold mb-2 group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors\">\n                          {post.title}\n                        </h3>\n                        <p className=\"text-gray-600 dark:text-gray-300\">{post.excerpt}</p>\n                        \n                        {/* Tags (if available) */}\n                        {post.tags && (\n                          <div className=\"flex flex-wrap gap-2 mt-4\">\n                            {post.tags.map((tag: string) => (\n                              <span \n                                key={tag}\n                                className=\"px-3 py-1 bg-gray-200 dark:bg-slate-700 rounded-full text-sm\"\n                              >\n                                {tag}\n                              </span>\n                            ))}\n                          </div>\n                        )}\n                      </div>\n                    </Link>\n                  </article>\n                ))}\n              </div>\n            </section>\n          ))}\n        </div>\n      </Container>\n    </main>\n  );\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 394, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 405, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 405, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}